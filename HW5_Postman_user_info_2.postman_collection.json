{
	"info": {
		"_postman_id": "48e88921-17ea-4b57-96fe-2ca64e5434c0",
		"name": "HW5_Postman_user_info_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user_info2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Вставить параметр salary из окружения в request",
							"// 2. Вставить параметр age из окружения в age",
							"// 3. Вставить параметр name из окружения в name",
							"// 4. Отправить запрос.",
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 6. Спарсить response body в json.",
							" let jsonData = pm.response.json();",
							"// 7. Спарсить request.",
							"let req = request.data",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"8. response has start_qa_salary\", function () {",
							"    pm.expect(jsonData).to.has.property(\"start_qa_salary\");",
							"});",
							"",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"9. response has qa_salary_after_6_months\", function () {",
							"    pm.expect(jsonData).to.has.property(\"qa_salary_after_6_months\");",
							"});",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"10. response has qa_salary_after_12_months\", function () {",
							"    pm.expect(jsonData).to.has.property(\"qa_salary_after_12_months\");",
							"});",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"11. response has qa_salary_after_1.5_year\", function () {",
							"    pm.expect(jsonData).to.has.property(\"qa_salary_after_1.5_year\");",
							"});",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"12. response has qa_salary_after_3.5_years\", function () {",
							"    pm.expect(jsonData).to.has.property(\"qa_salary_after_3.5_years\");",
							"});",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"13. response has person\", function () {",
							"    pm.expect(jsonData).to.has.property(\"person\");",
							"});",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"14. start_qa_salary is eq to req salary\", function () {",
							"    pm.expect(jsonData.start_qa_salary).to.eq(+req.salary);",
							"});",
							"// console.log (req)",
							"",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"15. qa_salary_after_6_months = salary*2\", function () {",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eq(+req.salary*2);",
							"});",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"16. qa_salary_after_12_months = salary*2.7\", function () {",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eq(+req.salary*2.7);",
							"});",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"17. qa_salary_after_1.5_year = salary*3.3\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eq(req.salary*3.3);",
							"});",
							"",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"18. qa_salary_after_3.5_years = salary*3.8\", function () {",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eq(req.salary*3.8);",
							"});",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"19. [1] from person = salary from req\", function () {",
							"    pm.expect(jsonData.person.u_name[1]).to.eq(+req.salary);",
							"});",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"20. u_age = age from req\", function () {",
							"    pm.expect(jsonData.person.u_age).to.eq(+req.age);",
							"});",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"21. u_salary_5_years = salary*4.2 from req\", function () {",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eq(+req.salary*4.2);",
							"});",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"let list = [jsonData.person];",
							"for (var i=0; i < list.length; i++){",
							"    console.log(list[i]);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}//user_info_2",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"",
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}